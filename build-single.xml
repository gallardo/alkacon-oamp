<?xml version="1.0" encoding="UTF-8"?>

<project name="Alkacon OpenCms Add-On Module Package" default="dist" basedir=".">

	<property name="opencms.input" location="${basedir}/../OpenCms" />
	<property name="opencms.output" location="${basedir}/../BuildOamp" />
	<property name="opencms.input.warfiles" location="${opencms.input}/webapp" />
	<property name="opencms.input.libs.runtime" location="${opencms.input}/lib/runtime" />
	<property name="opencms.input.libs.compile" location="${opencms.input}/lib/compile" />
	<property name="opencms.core.lib" location="${opencms.output}/build/jars-core" />

	<property name="module.input" location="${basedir}/${module.name}" />
	<property name="module.input.res" location="${module.input}/resources" />
	<property name="module.input.lib" location="${module.input.res}/system/modules/${module.name}/lib" />
	<property name="module.input.src" location="${module.input}/src" />

	<property name="module.output.classes" location="${opencms.output}/build/classes-${module.name}" />
	<property name="module.output.jar" location="${opencms.output}/build/jars-${module.name}" />
	<property name="module.output.zip" location="${opencms.output}/zip" />

	<property name="app.name" location="opencms" />

	<property name="jar.excludes" value="**/CVS/*,**/.cvsignore,**/.nbattrs,**/.project,**/.classpath" />
	<property name="zip.excludes" value="**/CVS/*,**/.cvsignore,**/.nbattrs,**/.project,**/.classpath" />
	<property name="jar.includes" value="**/*.properties,**/*.txt,**/*.dtd,**/*.xml,**/*.xsd" />

	<property environment="env" />

	<property file="${basedir}/alkacon.properties" />

	<!--
		if, foreach, trhow, trycatch, switch, outofdate, runtarget, timestampselector,
		propertycopy, osfamily, shellscript, pathtofileset, propertyselector, propertyregex,
		sortlist, urlencode, compilewithwalls, forget, antcallback, antfetch, assert, bool,
		limit, math, post, stopwatch, var, initfile, antclipse, antserver, remoteant, for
		isgreaterthan, islessthan, ispropertyfalse, ispropertytrue
	-->
	<taskdef resource="net/sf/antcontrib/antlib.xml" loaderref="contrib">
		<classpath>
			<pathelement location="${opencms.input.libs.compile}/ant-contrib-1.0b1.jar" />
		</classpath>
	</taskdef>

	<!--
		selectionprompt, readxmlproperty, selectiontreeprompt, ensuredirmanifest
	-->
	<taskdef resource="org/opencms/util/ant/taskdefs.properties" loaderref="opencms">
		<classpath>
			<pathelement location="${opencms.input.libs.compile}/ant.jar" />
			<pathelement location="${opencms.input.libs.compile}/ant-contrib-1.0b1.jar" />
			<pathelement location="${opencms.input.libs.compile}/ant-opencms-1.2.jar" />
			<pathelement location="${opencms.input.libs.runtime}/commons-beanutils-1.8.3.jar" />
			<pathelement location="${opencms.input.libs.runtime}/commons-collections-3.2.1.jar" />
			<pathelement location="${opencms.input.libs.runtime}/commons-digester-1.8.jar" />
			<pathelement location="${opencms.input.libs.runtime}/commons-logging-1.1.1.jar" />
			<pathelement location="${opencms.input.libs.runtime}/dom4j-1.6.1.jar" />
			<pathelement location="${opencms.input.libs.runtime}/jug-lgpl-2.0.0.jar" />
			<pathelement location="${opencms.input.libs.runtime}/xml-apis-2.11-0.jar" />
		</classpath>
	</taskdef>

	<target name="clean" description="Deletes outputs">
		<delete dir="${module.output.classes}" />
		<delete dir="${module.output.jar}" />
		<if>
			<available file="${module.output.zip}" />
			<then>
				<delete>
					<fileset dir="${module.output.zip}">
						<include name="${module.name}_*.zip" />
					</fileset>
				</delete>
			</then>
		</if>
	</target>

	<!-- Checks if all required libraries are available -->
	<target name="init">

		<if>
			<not>
				<available file="${module.input}" type="dir" />
			</not>
			<then>
				<echo message="Building OpenCms Module ${module.name} for OpenCms ${version.number}" />
				<fail>Module Directory not found: ${module.input}</fail>
			</then>
		</if>
		<if>
			<not>
				<or>
					<available file="${module.input}/module.properties" />
					<available file="${module.input.res}/manifest.xml" />
				</or>
			</not>
			<then>
				<echo message="Building OpenCms Module ${module.name} for OpenCms ${version.number}" />
				<fail>No Module Configuration File found: ${module.input}/module.properties or ${module.input.res}/manifest.xml</fail>
			</then>
		</if>
		<if>
			<available file="${module.input.res}/manifest.xml" />
			<then>
				<readxmlproperty property="module.version" xmlfile="${module.input.res}/manifest.xml" element="export/module/version" />
				<readxmlproperty property="module.dependencies" xmlfile="${module.input.res}/manifest.xml" element="export/module/dependencies/dependency" attribute="name" />
			</then>
		</if>
		<property file="${module.input}/module.properties" />
		<if>
			<or>
				<not>
					<isset property="module.version" />
				</not>
				<equals arg1="${module.version}" arg2="" />
			</or>
			<then>
				<echo message="Building OpenCms Module ${module.name} for OpenCms ${version.number}" />
				<fail>Wrong Module configuration: not able to get the module version.</fail>
			</then>
		</if>

		<for list="${module.dependencies}" param="dependency" trim="true">
			<sequential>
				<property name="@{dependency}.input" value="${basedir}/@{dependency}" />
				<property name="@{dependency}.output.classes" location="${opencms.output}/build/classes-@{dependency}" />
				<property name="@{dependency}.output.jar" location="${opencms.output}/build/jars-@{dependency}" />
				<if>
					<available file="${@{dependency}.input}/resources/manifest.xml" />
					<then>
						<readxmlproperty property="@{dependency}.module.version" xmlfile="${@{dependency}.input}/resources/manifest.xml" element="export/module/version" />
						<readxmlproperty property="@{dependency}.module.dependencies" xmlfile="${@{dependency}.input}/resources/manifest.xml" element="export/module/dependencies/dependency" attribute="name" />
					</then>
				</if>
				<property file="${@{dependency}.input}/module.properties" prefix="@{dependency}" />
				<property name="@{dependency}.output.zip" location="${module.output.zip}/@{dependency}_${@{dependency}.module.version}.zip" />

				<condition property="@{dependency}.available">
					<and>
						<available file="${@{dependency}.output.zip}" />
					</and>
				</condition>
			</sequential>
		</for>

		<condition property="opencms.available">
			<and>
				<available file="${opencms.core.lib}/opencms.jar" />
			</and>
		</condition>

		<if>
			<not>
				<isset property="module.libs" />
			</not>
			<then>
				<property name="module.libs" value="" />
			</then>
		</if>

		<for list="${module.libs}" param="library" trim="true">
			<sequential>
				<condition property="@{library}.available">
					<and>
						<available file="${opencms.input.libs.runtime}/@{library}" />
					</and>
				</condition>
			</sequential>
		</for>

		<condition property="tomcat.home" value="${env.TOMCAT_HOME}">
			<available file="${env.TOMCAT_HOME}" type="dir" />
		</condition>

		<condition property="tomcat.home" value="${env.CATALINA_HOME}">
			<available file="${env.CATALINA_HOME}" type="dir" />
		</condition>

		<echo message="Building Alkacon Module ${module.name} ${module.version} for OpenCms ${version.number}" />
		<echo message=" " />
		<echo message="OpenCms core lib directory is: ${opencms.core.lib}" />
		<echo message="OpenCms runtime lib directory is: ${opencms.input.libs.runtime}" />
		<echo message="OpenCms compile lib directory is: ${opencms.input.libs.compile}" />
		<echo message="OpenCms output directory is: ${opencms.output}" />
		<echo message="Module input directory is: ${module.input}" />
		<echo message="Module source directory is: ${module.input.src}" />
		<echo message="Detected Java version: ${ant.java.version}" />
		<echo message="Tomcat home is: ${tomcat.home}" />
		<echo message="Excluded files in Jar: ${jar.excludes}" />
		<echo message="Included files in Jar: ${jar.includes}" />
		<echo message=" " />
		<echo message="Module libraries: ${module.libs}" />
		<echo message="Module dependencies: ${module.dependencies}" />
		<echo message="Additional lib folder: ${module.input.lib}" />
	</target>

	<!-- Generates the opencms.jar if it is missing -->
	<target name="buildcore" unless="opencms.available">

		<echo message="Core opencms.jar missing, building it using ${opencms.input}/build.xml" />
		<ant antfile="${opencms.input}/build.xml" target="jar" />
		<antcall target="clean" />
	</target>

	<!-- Generates all the modules dependencies -->
	<target name="builddeps">
		<for list="${module.dependencies}" param="dependency" trim="true">
			<sequential>
				<if>
					<not>
						<istrue value="${@{dependency}.available}" />
					</not>
					<then>
						<echo message="Module dependency @{dependency} is missing, building it" />
						<if>
							<available file="${@{dependency}.input}" type="dir" />
							<then>
								<ant antfile="${basedir}/build.xml" target="dependencies" inheritAll="false">
									<property name="module.name" value="@{dependency}" />
								</ant>
							</then>
							<else>
								<ant antfile="${opencms.input}/modules/build.xml" target="dependencies" inheritAll="false">
									<property name="module.name" value="@{dependency}" />
								</ant>
							</else>
						</if>
					</then>
				</if>
			</sequential>
		</for>
	</target>

	<!-- Stop target if libraries required for compilation are missing -->
	<target name="checklibs" depends="init, buildcore, builddeps">

		<var name="module.libs.missing" value="" />
		<for list="${module.libs}" param="library" trim="true">
			<sequential>
				<if>
					<not>
						<isset property="@{library}.available" />
					</not>
					<then>
						<var name="module.libs.missing" value="${module.libs.missing}," />
					</then>
				</if>
			</sequential>
		</for>

		<if>
			<not>
				<equals arg1="${module.libs.missing}" arg2="" />
			</not>
			<then>
				<echo message="Error: Some of the required libraries are not available." />
				<echo message="To compile this module, you need the following libaries:" />
				<echo message="${module.libs}" />
				<echo message="which should be located in ${opencms.input.libs.runtime}" />

				<fail>Required libraries missing</fail>
			</then>
		</if>
	</target>

	<target name="compile" depends="init, buildcore, builddeps" description="Compiles ${module.name} module classes">

		<if>
			<available file="${module.input.src}" />
			<then>
				<mkdir dir="${module.output.classes}" />

				<!-- Create the classpath -->
				<!-- A) The code of the dependency modules (module jar) itself in the build directory (jars-<module>)-->
				<var name="module.dependencies.path" value="." />
				<for list="${module.dependencies}" param="dependency" trim="true">
					<sequential>
						<if>
							<available file="${@{dependency}.output.jar}" />
							<then>
								<for param="archive">
									<fileset dir="${@{dependency}.output.jar}">
										<include name="**/*.jar" />
									</fileset>
									<sequential>
										<var name="module.dependencies.path" value="${module.dependencies.path}:@{archive}" />
									</sequential>
								</for>
							</then>
						</if>
					</sequential>
				</for>

				<echo message="module.dependencies.path: ${module.dependencies.path}" />

				<!-- B) The libraries of opencms -->
				<var name="module.libs.path" value="." />
				<for list="${module.libs}" param="library" trim="true">
					<sequential>
						<var name="module.libs.path" value="${module.libs.path}:${opencms.input.libs.runtime}/@{library}" />
					</sequential>
				</for>
				<!-- C) The libraries of the module (<modulefolder>/libs/*.jar) -->
				<if>
					<available file="${module.input.lib}" />
					<then>
						<for param="archive">
							<path>
								<fileset dir="${module.input.lib}" includes="*.jar" />
							</path>
							<sequential>
								<var name="module.libs.path" value="${module.libs.path}:@{archive}" />
							</sequential>
						</for>
					</then>
				</if>
				<echo message="module.libs.path: ${module.libs.path}" />


				<!-- D) The libraries of the dependency - modules (<modulefolder>/libs/*.jar) -->
				<var name="module.dependencies.libs" value="." />

				<for list="${module.dependencies}" param="dependency">
					<sequential>
						<if>
							<!--
								This assumes that the dependency module is in the same project: OpenCms Modules
								because module.input is set hardcoded to "${basedir}".

								Support for including libs of dependencies in project OpenCms has to be added when
								required in future!!!
							-->
							<available file="${@{dependency}.input}" />
							<then>
								<for param="archive">
									<fileset dir="${@{dependency}.input}">
										<include name="**/*.jar" />
									</fileset>
									<sequential>
										<var name="module.dependencies.libs" value="${module.dependencies.libs}:@{archive}" />
									</sequential>
								</for>
							</then>
						</if>
					</sequential>
				</for>


				<javac srcdir="${module.input}/src" destdir="${module.output.classes}" debug="on" optimize="on" deprecation="on" source="1.5" target="1.5">
					<exclude name="**/test/**/*.java" />
					<classpath>
						<fileset dir="${opencms.input.libs.runtime}">
							<include name="**/*.jar" />
						</fileset>
						<fileset dir="${opencms.input.libs.compile}">
							<include name="**/*.jar" />
						</fileset>
						<fileset dir="${opencms.core.lib}">
							<include name="**/*.jar" />
						</fileset>

						<pathelement path="${module.dependencies.path}" />
						<pathelement path="${module.libs.path}" />
						<pathelement path="${module.dependencies.libs}" />
					</classpath>
				</javac>
				<copy todir="${module.output.classes}">
					<fileset dir="${module.input}/src" includes="${jar.includes}" excludes="${jar.excludes}">
						<exclude name="**/test/**" />
					</fileset>
				</copy>
			</then>
		</if>
	</target>

	<target name="jar" depends="compile" description="Generates the .jar file for module ${module.name}">
		<if>
			<available file="${module.input.src}" />
			<then>
				<mkdir dir="${module.output.jar}" />
				<jar jarfile="${module.output.jar}/${module.name}.jar" basedir="${module.output.classes}" />

				<for list="${module.dependencies}" param="dependency" trim="true">
					<sequential>
						<if>
							<available file="${@{dependency}.output.jar}" />
							<then>
								<copy todir="${module.output.jar}">
									<fileset dir="${@{dependency}.output.jar}" includes="*.jar" />
								</copy>
							</then>
						</if>
					</sequential>
				</for>
			</then>
		</if>
	</target>

	<target name="dist" depends="jar" description="Builds the distribution .zip file">

		<mkdir dir="${module.output.zip}" />
		<if>
			<and>
				<available file="${module.output.jar}" />
				<available file="${module.input.res}" type="dir" />
			</and>
			<then>
				<zip destfile="${module.output.zip}/${module.name}_${module.version}.zip">
					<zipfileset dir="${module.output.jar}" prefix="system/modules/${module.name}/lib/" includes="${module.name}.jar" />
					<zipfileset dir="${module.input.res}" prefix="" excludes="${zip.excludes}" />
				</zip>
			</then>
			<else>
				<if>
					<available file="${module.input.res}" type="dir" />
					<then>
						<zip destfile="${module.output.zip}/${module.name}_${module.version}.zip">
							<zipfileset dir="${module.input.res}" prefix="" excludes="${zip.excludes}" />
						</zip>
					</then>
				</if>
			</else>
		</if>

	</target>

	<target name="tomcat.copy" depends="dist" description="Copies module resources to Tomcat directory">

		<if>
			<available file="${module.output.jar}" />
			<then>
				<echo message="Copying to tomcat.home/webapps/app.name/WEB-INF/lib:" />
				<echo message="tomcat.home: ${tomcat.home}" />
				<echo message="app.name: ${app.name}" />
				<copy todir="${tomcat.home}/webapps/${app.name}/WEB-INF/lib">
					<fileset dir="${module.output.jar}" includes="*.jar" />
				</copy>
			</then>
		</if>
		<if>
			<available file="${module.output.zip}/${module.name}_${module.version}.zip" />
			<then>
				<copy file="${module.output.zip}/${module.name}_${module.version}.zip" todir="${tomcat.home}/webapps/${app.name}/WEB-INF/packages/modules" />
			</then>
		</if>
	</target>

	<target name="tomcat.update" depends="tomcat.copy" description="Recompile changes and installs them in Tomcat webapps directory" />

	<target name="tomcat.all" depends="clean, tomcat.update" description="Does a complete recompile of the module and installs it in Tomcat webapps directory" />

</project>
